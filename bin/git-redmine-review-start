#!/bin/bash

source /usr/local/share/Git-Redmine-Suite/helpers/current_git_command
function help {
    TASK="$1"
    PR="$2"
    if [ "x$TASK" == "x" ] || [ "x$PR" == "x" ]
    then
        echo "$CURRENT_GIT_COMMAND TASK_NUMBER PULL_REQUEST"
    else
        echo "This PR has been found in the task : $PR"
        echo ""
        echo "If it is ok, start the review with :"
        echo ""
        echo "    $CURRENT_GIT_COMMAND $TASK $PR"
        echo ""
    fi
    exit 1
}

if [ "x$HELP" != "x" ]
then
    help
fi

set -e

source /usr/local/share/Git-Redmine-Suite/helpers/redmine-checkconf
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-statuses
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-title
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-project
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-review
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-tasks

TASK="$1"
PR="$2"

if [ "x$TASK" != "x" ] && [ "x$PR" == "x" ]
then
    help "$TASK" "$(redmine_get_pr "$TASK")"
fi

if [ "x$TASK" == "x" ] || [ "x$PR" == "x" ]
then
    help
fi

set +e
BRNAME=$(git config redmine.review.$TASK.branch)
set -e
if [ "x$BRNAME" != "x" ]
then
    cat<<__EOF__
This review is already in progress.
You have to abort the review before and start it again.

    git redmine review abort $TASK
    $CURRENT_GIT_COMMAND $TASK $PR

__EOF__
    exit 1
fi

redmine_check_task "$TASK" "$REDMINE_REVIEW_TODO,$REDMINE_REVIEW_IN_PROGRESS"

TASK_TITLE=$(redmine_get_title $TASK)
SLUG_TITLE=$(/usr/local/share/Git-Redmine-Suite/helpers/slug --this "$TASK_TITLE")
BRNAME="redmine-review-$SLUG_TITLE"
PROJECT=$(redmine_get_project $TASK)

echo "Starting the review of task #$TASK - PR:$PR ..."
echo "    * $TASK_TITLE"

set -x

git fetch -ap
git fetch --tags -p
git checkout devel
git checkout -b "$BRNAME" "$PR"
git config "redmine.review.current" "$TASK"
git config "redmine.review.$TASK.pr" "$PR"
git config "redmine.review.$TASK.title" "$TASK_TITLE"
git config "redmine.review.$TASK.branch" "$BRNAME"
git config "redmine.review.$TASK.project" "$PROJECT"

set +x
redmine_set_status $TASK $REDMINE_REVIEW_IN_PROGRESS $REDMINE_USER_ID

set +e
git diff origin/devel ||Â true

cat <<__EOF__

You can squash / rebase ... 
but please keep the name $BRNAME 
for your branch before further action with git redmine review

To start a review (example):
    git rebase origin/devel
    git diff origin/devel..

If you want to add fixes and send back the branch to the user (if the remote branch is standard):
    git push origin HEAD:redmine-$SLUG_TITLE
or if you have rebase on origin/devel
    git push -f origin HEAD:redmine-$SLUG_TITLE
then
    git redmine review abort $TASK

Then go to redmine and reassign the task to the developer

To finish the review:

    git redmine review finish $TASK

And don't forget to run your tests before !

__EOF__

