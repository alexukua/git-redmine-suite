#!/bin/bash

source /usr/local/share/Git-Redmine-Suite/helpers/current_git_command
function help {
    echo "$CURRENT_GIT_COMMAND TASK_NUMBER"
    exit 1
}

if [ "x$HELP" != "x" ]
then
    help
fi

set -e

source /usr/local/share/Git-Redmine-Suite/helpers/redmine-checkconf
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-statuses
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-title
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-project
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-review
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-tasks
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-question

TASK="$1"

if [ "x$TASK" == "x" ]
then
    help
fi

set +e
redmine_get_cf_conf

PR=$(redmine_get_pr $TASK)
if [ -z "$PR" ]
    then
    echo "No PR found in the task $TASK"
    echo "Fill the GIT_PR field if you have one."
    echo ""
    exit 1
fi

BRNAME=$(git config redmine.review.$TASK.branch)
set -e

if [ "x$BRNAME" != "x" ]
then
    cat<<__EOF__
This review is already in progress.
You have to abort the review before and start it again.

    git redmine review abort
    $CURRENT_GIT_COMMAND $TASK

__EOF__
    exit 1
fi

echo "Starting the review : "
extended_status=1 redmine_get_title $TASK
if [ "x$GIT_REDMINE_CHAIN_REVIEW_START" == "x" ]
then
    are_you_sure "Do you really want to start this review ?"
fi

echo ""
echo "Updating redmine status ..."
task=$TASK \
status=$REDMINE_REVIEW_IN_PROGRESS \
assigned_to=$REDMINE_USER_ID \
redmine_set_status

PROJECT=$(redmine_get_project $TASK)
TASK_TITLE=$(redmine_get_title $TASK)
SLUG_TITLE=$(/usr/local/share/Git-Redmine-Suite/helpers/slug --this "$TASK_TITLE")
BRNAME="redmine-review-$SLUG_TITLE"

git fetch -ap
git fetch --tags -p
git checkout -b "$BRNAME" "$PR"
git config "redmine.review.current" "$TASK"
git config "redmine.review.$TASK.pr" "$PR"
git config "redmine.review.$TASK.title" "$TASK_TITLE"
git config "redmine.review.$TASK.branch" "$BRNAME"
git config "redmine.review.$TASK.project" "$PROJECT"


set +e
if are_you_sure "Do you want to rebase before review ?"
then
    git rebase origin/devel && (git diff --color origin/devel | less -R)
else
    git diff --color origin/devel | less -R
fi

cat <<__EOF__

You can squash / rebase ... 
but please keep the name $BRNAME 
for your branch before further action with git redmine review

To start a review (example):
    git rebase origin/devel
    git diff origin/devel..

If you want to add fixes and send back the branch to the user (if the remote branch is standard):
    git push origin HEAD:redmine-$SLUG_TITLE
or if you have rebase on origin/devel
    git push -f origin HEAD:redmine-$SLUG_TITLE
then
    git redmine review reject

If you want to abort the review
    git redmine review abort

To finish the review:
    git redmine review finish

And don't forget to run your tests before !

__EOF__

if are_you_sure "Do you want to finish the review now ?"
then
    GIT_REDMINE_CHAIN_REVIEW_FINISH=1 exec git redmine review finish
fi
