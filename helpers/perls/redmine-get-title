#!/usr/bin/perl
use feature 'say';
use strict;
use warnings;
use DateTime;
use Date::Parse;
use utf8::all;
{

    package MyOpts;
    use Moo;
    use MooX::Options;
    option 'id' => (
        is       => 'ro',
        required => 1,
        doc      => 'id of the task',
        format   => 'i',
    );
    option 'auth_key' => (
        is       => 'ro',
        format   => 's',
        required => 1,
        doc      => 'your auth key',
    );
    option 'server_url' => (
        is       => 'ro',
        format   => 's',
        required => 1,
        doc      => 'the redmine url of the server',
    );
    option 'trace' => (
        is      => 'ro',
        default => sub {0},
        doc     => 'debug mode',
    );
    option 'with_status'          => ( is => 'ro', );
    option 'with_extended_status' => ( is => 'ro', );
    option 'pad'                  => (
        is      => 'ro',
        default => sub {'    '},
        format  => 's',
        doc     => 'pad display',
    );
    1;
};

my $opt = MyOpts->new_with_options;

use Redmine::API;
my $r = Redmine::API->new(
    'auth_key' => $opt->auth_key,
    'base_url' => $opt->server_url,
    'trace'    => $opt->trace,
);

my $pad    = $opt->pad;
my $id     = $opt->id;
my $resp   = $r->issues->issue->get( $id, include => 'custom_fields' );
my $issue  = $resp->content->{issue};
my $status = $issue->{status}->{name};
my $title  = $issue->{tracker}->{name} . " #" . $id . " - " . $issue->{subject};
my $now = DateTime->now;

if ( $opt->with_status || $opt->with_extended_status ) {
    my %cf = map { @$_{qw/name value/} } @{ $issue->{custom_fields} };
    my $release = $cf{GIT_RELEASE};
    my $duration_str = '???';
    eval {
        my $updated_on_str  = $issue->{updated_on};
        my $updated_on_time = str2time($updated_on_str);
        my $updated_on = DateTime->from_epoch( epoch => $updated_on_time );
        my %duration   = ( $now - $updated_on )->deltas;
        if ( $duration{month} ) {
            $duration_str = sprintf( '%d months and %d days ago',
                $duration{month}, $duration{days} );
        }
        elsif ( $duration{days} ) {
            $duration_str = sprintf( '%d days ago', $duration{days} );
        }
        else {
            $duration_str = 'today';
        }
    };

    my $assigned_to = $issue->{assigned_to}->{name};
    if ( $opt->with_status ) {
        my $released_str = "";
        if ($release) {
            $released_str = ", Released with v$release";
        }
        say "($status) $title, Updated $duration_str$released_str";
    }
    elsif ( $opt->with_extended_status ) {
        say $pad, "Title          : ", $title;
        say $pad, "Status         : ", $status;
        say $pad, "Last update    : ", $duration_str;
        say $pad, "Assigned to    : ", $assigned_to;
        say $pad, "Reported Repos : ", $cf{GIT_REPOS} if $cf{GIT_REPOS};
        say $pad, "Last PR        : ", $cf{GIT_PR} if $cf{GIT_PR};
        say $pad, "Released       : ", $cf{GIT_RELEASE} if $cf{GIT_RELEASE};
    }

}
else {
    say $title;
}

