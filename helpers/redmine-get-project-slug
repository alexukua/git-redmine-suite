#!/usr/bin/perl
use feature 'say';
use strict;
use warnings;
use Encode;
use List::MoreUtils qw/all/;
{

    package MyOpts;
    use Moo;
    use MooX::Options;
    option 'auth_key' => (
        is       => 'ro',
        format   => 's',
        required => 1,
        doc      => 'your auth key',
    );
    option 'server_url' => (
        is       => 'ro',
        format   => 's',
        required => 1,
        doc      => 'the redmine url of the server',
    );
    option 'trace' => (
        is      => 'ro',
        default => sub {0},
        doc     => 'debug mode',
    );
    1;
};

sub filter_valid_project {
    my @projects = @_;
    my @valid_projects;
    for my $project(@projects) {
        my %cf = map { ($_->{name} => $_->{id}) } @{$project->{custom_fields}};
        push @valid_projects, $project if all { defined } @cf{qw/GIT_REPOS GIT_PR GIT_RELEASE/};
    }
    return @valid_projects;
}

my $opt = MyOpts->new_with_options;

use Redmine::API;
my $r = Redmine::API->new(
    'auth_key' => $opt->auth_key,
    'base_url' => $opt->server_url,
    'trace'    => $opt->trace,
);

print "List of all valid projects and slugs ";
my $offset = 0;
my $total_count;
my @projects;
my $loop = 0;
$|=1;
for ( ;; ) {
    my $resp = $r->projects->list->all(offset => $offset, include => 'custom_fields');
    my $content = $resp->content;
    $total_count //= $content->{total_count};

    push @projects, filter_valid_project(@{ $content->{projects} });

    $offset += $content->{limit};
    last unless $offset < $total_count;
    $loop = 1;
    print ".";
}
print " " if $loop;
say ": 
";

for my $project ( sort { $a->{identifier} cmp $b->{identifier} } @projects ) {
    $project->{name} = encode( 'UTF8', $project->{name} );
    say sprintf( "    %-40s ( %s )", @$project{qw/identifier name/} );
}
