#!/bin/bash

source /usr/local/share/Git-Redmine-Suite/helpers/current_git_command
function help {
    echo "[V=X.XX] $CURRENT_GIT_COMMAND TASK_1 TASK_2 ..."
    exit 1
}

if [ -n "$HELP" ]
then
    help
fi

set -e

source /usr/local/share/Git-Redmine-Suite/helpers/redmine-checkconf
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-project
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-tasks
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-statuses
source /usr/local/share/Git-Redmine-Suite/helpers/redmine-question

if git config "redmine.release.version" > /dev/null
then
    echo "Your already has start a release !"
    echo "Please abort it or finish it :"
    echo ""
    echo "    git redmine release abort"
    echo "    git redmine release finish"
    echo ""
    exit 1
fi

set +e
redmine_get_cf_conf
set -e

GIT_REPOS_URL=$(git config remote.origin.url)

declare -a TASKS=($*)

if [ ${#TASKS[@]} -eq 0 ]
then
    echo "Please list the tasks you want to release :"
    echo ""
    declare -a PARAMS=(--auth_key "$REDMINE_AUTHKEY" --server_url "$REDMINE_URL" --assigned_to_id "$REDMINE_USER_ID" --status_id "$REDMINE_RELEASE_TODO" --cf_id "$GIT_REPOS_ID" --cf_val "$GIT_REPOS_URL")

    /usr/local/share/Git-Redmine-Suite/helpers/redmine-get-tasks ${PARAMS[@]}

    declare -a TASKS=($(/usr/local/share/Git-Redmine-Suite/helpers/redmine-get-tasks --ids_only ${PARAMS[@]}))
    if [ ${#TASKS[@]} -ne 0 ] && are_you_sure "Do you want to start these tasks ?"
    then
        exec git redmine release start ${TASKS[@]}
    fi

    exit 1
fi

git fetch -ap
git fetch --tags -p

if [ -z "$V" ]
then
    V=$(/usr/local/share/Git-Redmine-Suite/helpers/next_version --version=$(((git tag | grep ^v) || echo "v0.00") | /usr/bin/perl -pe 's/^v//' | sort -n | tail -n1))
fi

Q="Start release v$V"
if [ -n "$GIT_REDMINE_CHAIN_RELEASE_START" ]
then
    echo "$Q ..."
else
    are_you_sure "$Q ?"
fi

for TASK in ${TASKS[@]}
do
    echo "Update redmine status $TASK ..."
    task=$TASK \
    status=$REDMINE_RELEASE_TODO \
    assigned_to=$REDMINE_USER_ID \
    git_repos_id=$GIT_REPOS_ID \
    git_repos_url=$GIT_REPOS_URL \
    redmine_set_status
done

BRNAME="redmine-release-v$V"

git checkout devel
git merge origin/devel
git checkout -b "$BRNAME"

git config "redmine.release.version" "$V"
git config "redmine.release.tasks" "$(echo ${TASKS[@]})"
git config "redmine.release.branch" "$BRNAME"

CHANGELOG=$(get_change_log)
touch "$CHANGELOG"

/usr/local/share/Git-Redmine-Suite/helpers/tag_version --version="$V" > "$CHANGELOG".new
cat "$CHANGELOG" >> "$CHANGELOG".new
mv "$CHANGELOG".new "$CHANGELOG"
vim "$CHANGELOG" || true
git add "$CHANGELOG"
git ci -m "Add version in Changes"
if [ -e 'dist.ini' ]
then
    cat dist.ini | /usr/bin/perl -pe "s/version = (.*)/version = $V/" > dist.ini.new
    mv dist.ini.new dist.ini
    vim dist.ini || true
    git add dist.ini
    git ci -m 'Update version DistZilla'
fi
if [ -e 'VERSION' ]
then
    echo "$V" > VERSION
    git add VERSION
    git ci -m 'Update version file'
fi

git diff --color origin/master | less -R
cat <<__EOF__
Please edit all the file you need and commit it before finish the release.
Don't forget to run the tests !

You can finish with :

git redmine release finish

or you can abort :

git redmine release abort

__EOF__

if are_you_sure "Do you want to finish the release now ?"
then
    GIT_REDMINE_CHAIN_RELEASE_FINISH=1 exec git redmine release finish
fi